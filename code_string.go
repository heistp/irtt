// Code generated by "stringer -type=Code"; DO NOT EDIT.

package irtt

import "fmt"

const (
	_Code_name_0 = "UnexpectedOpenFlagInvalidGCModeStringUnspecifiedWithSpecifiedAddressesNoMatchingInterfacesUpNoMatchingInterfacesAllocateResultsPanicOpenTimeoutTooShortInvalidReceivedStatsStringInvalidReceivedStatsIntParamsChangedInvalidParamValueInvalidServerRestrictionOpenTimeoutNoSuitableAddressFoundUnknownParamParamOverflowShortParamBufferServerClosedInvalidFlagBitsSetConnTokenZeroDurationNonPositiveIntervalNonPositiveDFNotSupportedInconsistentClocksNonexclusiveMidpointTStampUnexpectedHMACBadHMACNoHMACBadMagicNoSuchWaiterNoSuchTimerNoSuchFillerNoSuchAveragerInvalidWaitDurationInvalidWaitFactorInvalidWaitStringInvalidSleepFactorInvalidClockIntInvalidClockStringInvalidAllowStampStringInvalidStampAtIntInvalidStampAtStringFieldsCapacityTooLargeFieldsLengthTooLargeInvalidDFStringUnexpectedSequenceNumberClockMismatchStampAtMismatchShortReplyUnexpectedReplyFlagExpectedReplyFlagShortWriteTTLErrorDFErrorDSCPErrorInvalidExpAvgAlphaInvalidWinAvgWindow"
	_Code_name_1 = "MultipleAddressesServerStartListenerStartListenerStopListenerErrorDropDropUnparseableParamsDropInvalidConnTokenDropAddressMismatchDropShortIntervalConnectingConnectedWaitForPacketsNewConnOpenCloseCloseConnNoDSCPSupportServerRestrictionDurationLimitExceededNoTestNoReceiveDstAddrSupport"
)

var (
	_Code_index_0 = [...]uint16{0, 18, 37, 70, 92, 112, 132, 151, 177, 200, 213, 230, 254, 265, 287, 299, 312, 328, 340, 358, 371, 390, 409, 423, 441, 467, 481, 488, 494, 502, 514, 525, 537, 551, 570, 587, 604, 622, 637, 655, 678, 695, 715, 737, 757, 772, 796, 809, 824, 834, 853, 870, 880, 888, 895, 904, 922, 941}
	_Code_index_1 = [...]uint16{0, 17, 28, 41, 53, 66, 70, 91, 111, 130, 147, 157, 166, 180, 187, 196, 205, 218, 235, 256, 262, 285}
)

func (i Code) String() string {
	switch {
	case -57 <= i && i <= -1:
		i -= -57
		return _Code_name_0[_Code_index_0[i]:_Code_index_0[i+1]]
	case 1 <= i && i <= 21:
		i -= 1
		return _Code_name_1[_Code_index_1[i]:_Code_index_1[i+1]]
	default:
		return fmt.Sprintf("Code(%d)", i)
	}
}
